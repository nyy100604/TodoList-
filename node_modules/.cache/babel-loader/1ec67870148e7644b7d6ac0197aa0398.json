{"ast":null,"code":"import { configureStore } from \"@reduxjs/toolkit\";\nimport todoReducer from \"./slices/todo\";\nimport { combineReducers } from \"@reduxjs/toolkit\";\nimport { todoApiService } from \"./services/todoApi\";\nconst reducers = combineReducers({\n  todoReducer,\n  [todoApiService.reducerPath]: todoApiService.reducer\n});\nconst store = configureStore({\n  reducer: reducers,\n  middleware: getCurrentMiddlewares => {\n    return getCurrentMiddlewares() // .concat(loggerMiddleware)\n    // .concat(weiMiddleware)\n    .concat(todoApiService.middleware);\n  }\n});\nexport default store;","map":{"version":3,"sources":["/Users/liuweicheng/Desktop/reactTs/bruce-redux-todo-origin/src/store.ts"],"names":["configureStore","todoReducer","combineReducers","todoApiService","reducers","reducerPath","reducer","store","middleware","getCurrentMiddlewares","concat"],"mappings":"AAAA,SAASA,cAAT,QAA+B,kBAA/B;AACA,OAAOC,WAAP,MAAwB,eAAxB;AAEA,SAASC,eAAT,QAAgC,kBAAhC;AACA,SAASC,cAAT,QAA+B,oBAA/B;AAEA,MAAMC,QAAQ,GAAGF,eAAe,CAAC;AAC/BD,EAAAA,WAD+B;AAE/B,GAACE,cAAc,CAACE,WAAhB,GAA8BF,cAAc,CAACG;AAFd,CAAD,CAAhC;AAKA,MAAMC,KAAK,GAAGP,cAAc,CAAC;AAC3BM,EAAAA,OAAO,EAAEF,QADkB;AAE3BI,EAAAA,UAAU,EAAGC,qBAAD,IAA2B;AACrC,WACEA,qBAAqB,GACnB;AACA;AAFmB,KAGlBC,MAHH,CAGUP,cAAc,CAACK,UAHzB,CADF;AAMD;AAT0B,CAAD,CAA5B;AAaA,eAAeD,KAAf","sourcesContent":["import { configureStore } from \"@reduxjs/toolkit\";\nimport todoReducer from \"./slices/todo\";\nimport { loggerMiddleware, weiMiddleware } from \"./middleware\";\nimport { combineReducers } from \"@reduxjs/toolkit\";\nimport { todoApiService } from \"./services/todoApi\";\n\nconst reducers = combineReducers({\n  todoReducer,\n  [todoApiService.reducerPath]: todoApiService.reducer,\n});\n\nconst store = configureStore({\n  reducer: reducers,\n  middleware: (getCurrentMiddlewares) => {\n    return (\n      getCurrentMiddlewares()\n        // .concat(loggerMiddleware)\n        // .concat(weiMiddleware)\n        .concat(todoApiService.middleware)\n    );\n  },\n});\nexport type RootState = ReturnType<typeof reducers>;\nexport type AppDispatch = typeof store.dispatch;\nexport default store;\n"]},"metadata":{},"sourceType":"module"}